<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="myPageRepository">

   <!-- 관리자용 회원 목록 조회 (기존과 동일) -->
   <select id="findAllUsersForAdmin" resultType="user">
        select * from USERS;
   </select>

   <!-- 회원 등급 정보 조회 (기존과 동일) -->
   <select id="findAllUserGrades" resultType="userGrade">
        SELECT 
    g.grade_id,
    g.grade_name,
    g.grade_color,
    g.grade_icon,
    g.min_experience,
    g.max_experience
FROM 
    USERS u
JOIN 
    USER_GRADES g ON u.grade_id = g.grade_id;
   </select>
   
   <!-- 관리자용 문제 목록 조회 (3개 테이블 JOIN) -->
   <select id="findAllProblemsForAdmin" resultType="challenge">
        SELECT 
            c.challenge_id,
            c.challenge_title,
            c.level_id,
            c.category_id,
            c.language,
            c.content,
            c.hint,
            c.correct,
            cl.level_name,
            cc.category_name
        FROM 
            Challenges c
        LEFT JOIN 
            Challenge_Levels cl ON c.level_id = cl.level_id
        LEFT JOIN 
            Challenge_Categorys cc ON c.category_id = cc.category_id
        ORDER BY 
            c.challenge_id DESC
   </select>
   
   <!-- 문제 난이도 목록 조회 -->
   <select id="findAllProblemLevels" resultType="challengeLevel">
        SELECT 
            level_id,
            level_name,
            color,
            exp
        FROM 
            Challenge_Levels
        ORDER BY 
            level_id
   </select>
   
   <!-- 문제 카테고리 목록 조회 -->
   <select id="findAllProblemCategories" resultType="challengeCategory">
        SELECT 
            category_id,
            category_name
        FROM 
            Challenge_Categorys
        ORDER BY 
            category_id
   </select>
   
   <!-- 전체 회원 수 조회 -->
   <select id="getTotalUserCount" resultType="int">
       SELECT COUNT(*) FROM USERS
   </select>
   
   <!-- 전체 시험 수 조회 -->
   <select id="getTotalTestCount" resultType="int">
       SELECT COUNT(*) FROM Tests
   </select>
   
   <!-- 전체 문제 수 조회 -->
   <select id="getTotalProblemCount" resultType="int">
       SELECT COUNT(*) FROM Challenges
   </select>
   
   <!-- 전체 상품 수 조회 -->
   <select id="getTotalProductCount" resultType="int">
       SELECT COUNT(*) FROM Products
   </select>
   
   <!-- 전체 게시글 수 조회 -->
   <select id="getTotalPostCount" resultType="int">
       SELECT COUNT(*) FROM posts
   </select>
   
   <!-- 관리자용 상품 목록 조회 -->
   <select id="findAllProductsForAdmin" resultType="product">
       SELECT 
           product_id,
           product_title,
           stitle,
           writer,
           publisher,
           content,
           page,
           price,
           languages,
           stock,
           product_image
       FROM 
           Products
       ORDER BY 
           product_id DESC
   </select>
   
   <!-- 관리자용 시험 목록 조회 -->
   <select id="findAllTestsForAdmin" resultType="test">
       SELECT 
           t.test_id,
           t.title,
           t.content,
           t.level_id,
           t.category_id,
           t.user_id
       FROM 
           Tests t
       ORDER BY 
           t.test_id DESC
   </select>
   
   <!-- 관리자용 시험 삭제 -->
   <delete id="deleteTest" parameterType="int">
       DELETE FROM Tests WHERE test_id = #{testId}
   </delete>
   
   <!-- DB 연결 테스트용 -->
   <select id="testConnection" resultType="int">
       SELECT COUNT(*) FROM USERS
   </select>

   <!-- 관리자용 게시글 목록 조회 (posts, post_category, users JOIN) -->
   <select id="findAllPostsForAdmin" resultType="post">
       SELECT 
           p.post_id,
           p.title,
           p.content,
           p.user_id,
           p.category_id,
           p.views,
           p.created_at
       FROM 
           posts p
       ORDER BY 
           p.created_at DESC
   </select>

   <!-- 게시글 카테고리 목록 조회 -->
   <select id="findAllPostCategories" resultType="postCategory">
       SELECT 
           category_id,
           name,
           color
       FROM 
           post_category
       ORDER BY 
           category_id
   </select>

   <!-- 관리자용 게시글 삭제 -->
   <delete id="deletePost" parameterType="int">
       DELETE FROM posts WHERE post_id = #{postId}
   </delete>
   
   
   <select id="getUserChallengeTitleList" resultType="challenge">
  		SELECT
    		cs.challenge_sub_id,
    		ch.challenge_id,
    		ch.challenge_title,
    		ch.level_id,
    		ch.category_id,
    		ch.language,
    		ch.content,
    		ch.hint,
    		ch.correct
		FROM challenge_sub cs
		JOIN Challenges ch ON cs.challenge_id = ch.challenge_id
		WHERE cs.user_id = #{user_id}
		ORDER BY cs.challenge_sub_id ASC
   </select>
   
   <select id="getUserChallengePassList" resultType="challengeSub">
   		select * from challenge_sub where user_id= #{user_id};
   </select>
   
   <select id="getUserChallengeLevelList" resultType="challengeLevel">
   		SELECT 
    		cl.level_name,
    		cl.color,
    		cl.exp
		FROM challenge_sub cs
		JOIN Challenges ch ON cs.challenge_id = ch.challenge_id
		JOIN Challenge_Levels cl ON ch.level_id = cl.level_id
		WHERE cs.user_id = #{user_id}
		ORDER BY cs.challenge_sub_id ASC;
   </select>
   
   <select id="getUserChallengeCategoryList" resultType="challengeCategory">
   		SELECT 
    		cc.category_name
		FROM challenge_sub cs
		JOIN Challenges ch ON cs.challenge_id = ch.challenge_id
		JOIN Challenge_Categorys cc ON ch.category_id = cc.category_id
		WHERE cs.user_id = #{user_id}
		ORDER BY cs.challenge_sub_id ASC;
   </select>
   		
	<select id="getUserGrade" resultType="userGrade">
    	SELECT 
        	G.grade_id,
        	G.grade_name,
       	 	G.min_experience,
        	G.max_experience,
        	G.grade_color,
        	G.grade_icon
    	FROM 
        	USERS U
    	LEFT JOIN 
        	USER_GRADES G ON U.grade_id = G.grade_id
    	WHERE 
        	U.user_id = #{user_id};
	</select>

   	
   	<select id="getUserPostList" resultType="post">
   		SELECT * FROM posts WHERE user_id = #{user_id}
   	</select>
   	
   	<select id="getUserPostCategoryList" resultType="postCategory">
   		SELECT 
    		pc.name AS category_name
		FROM 
    		posts p
		JOIN 
    		post_category pc ON p.category_id = pc.category_id
		WHERE 
    		p.user_id = #{user_id}
		ORDER BY 
   		 	p.post_id ASC;
   	</select>
   	
   	<update id="updateNickname" parameterType="user">
   		UPDATE USERS
    		SET nickname = #{nickname}
    	WHERE user_id = #{user_id}
   	</update>
   	
   	<select id="getUserPass" resultType="user">
   		SELECT password FROM users WHERE user_id = #{user_id}
   	</select>
   	
   	<update id="updatePassword" parameterType="user">
   		UPDATE USERS
    		SET password = #{password}
    	WHERE user_id = #{user_id}
   	</update>
   	
   	<select id="getTestList" resultType="test">
   		SELECT * FROM tests WHERE user_id = #{user_id}
   	</select>
   	
   	<select id="getTestCategoryList" resultType="testCategory">
   		SELECT T.category_id, C.name AS name
		FROM TESTS T
			JOIN TEST_CATEGORY C ON T.category_id = C.category_id
		WHERE T.user_id = #{user_id}
			ORDER BY T.created_at DESC;
   	</select>
   	
   	 <select id="getTestLevelList" resultType="testlevel">
   		SELECT 
  			T.level_id, L.name AS name, L.color AS color
		FROM TESTS T
			JOIN TEST_LEVELS L ON T.level_id = L.level_id
			WHERE T.user_id = #{user_id}
		ORDER BY T.test_id DESC; 
   	</select>
   	
   	<select id="getTestSubUser" resultType="user">
    	SELECT 
    		T.test_id,
    		T.title AS title,
    		TS.test_sub_id,
    		U.nickname AS nickname,
    		U.user_id,
    		U.email AS email,
    		TS.correct_count,
    		TS.wrong_count,
    		TS.pass,
    		TS.created_at
    	FROM TESTS T
    	JOIN TEST_SUB TS ON T.test_id = TS.test_id
    	JOIN USERS U ON TS.user_id = U.user_id
    	WHERE T.user_id = #{test_id}
    	ORDER BY T.test_id DESC, TS.created_at DESC;
    </select>
   	
   	<select id="getTestIdTitle" resultType="test">
   		SELECT 
    		T.test_id,
    		T.title AS title,
    		TS.test_sub_id,
    		U.nickname AS nickname,
    		U.user_id,
    		TS.correct_count,
    		TS.wrong_count,
    		TS.pass,
    		TS.created_at
		FROM TESTS T
		JOIN TEST_SUB TS ON T.test_id = TS.test_id
		JOIN USERS U ON TS.user_id = U.user_id
		WHERE T.user_id = #{test_id}
		ORDER BY T.test_id DESC, TS.created_at DESC;
   	</select>
   	
   	<select id="getTestSub" resultType="testsub">
   		SELECT 
    		T.test_id,
    		T.title AS title,
    		TS.test_sub_id,
    		U.nickname AS nickname,
    		U.user_id,
    		TS.correct_count,
    		TS.wrong_count,
    		TS.pass,
    		TS.created_at
		FROM TESTS T
		JOIN TEST_SUB TS ON T.test_id = TS.test_id
		JOIN USERS U ON TS.user_id = U.user_id
		WHERE T.user_id = #{test_id}
		ORDER BY T.test_id DESC, TS.created_at DESC;
   	</select>
   	
   	<select id="testSubDetailList" resultType="testsub">
   		SELECT * FROM test_sub WHERE user_id = #{user_id} AND test_id = #{test_id};
   	</select>
   	
   	<select id="testSubAnswerDetailList" resultType="testanswer">
   		SELECT 
    		ts.test_sub_id,
    		tad.*
		FROM test_sub ts
		JOIN test_answer_detail tad 
    		ON ts.test_sub_id = tad.test_sub_id
		WHERE ts.user_id = #{user_id}
  			AND ts.test_id = #{test_id};
   	</select>
   	
   	<select id="testProblemList" resultType="testProblem">
   		 SELECT 
    		ts.test_sub_id,
    		tad.answer_detail_id,
    		tp.*
		FROM test_sub ts
		JOIN test_answer_detail tad 
   			ON ts.test_sub_id = tad.test_sub_id
		JOIN test_problems tp
    		ON tad.test_problem_id = tp.test_problem_id
		WHERE ts.user_id = #{user_id}
  			AND ts.test_id = #{test_id}
		ORDER BY tp.test_problem_id;
   	</select>
   	
   		
</mapper> 